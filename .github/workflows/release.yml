name: Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags starting with 'v', like v1.0.0

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24' # Or the Go version specified in your Makefile

      - name: Get Makefile dependencies
        run: make deps

      - name: Build binaries for all platforms
        run: make build-all

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          # This token is provided by GitHub Actions, so you don't need to set it.
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication-transfer-for-github-apps
          token: ${{ secrets.GITHUB_TOKEN }}
          # Whether to automatically associate assets with the release.
          prerelease: false
          # Files to upload. The paths are relative to the root of the repository.
          files: dist/*/*.tar.gz, dist/*.exe, dist/*.zip

  create-release-notes:
    runs-on: ubuntu-latest
    needs: build-release # Ensure build-release job is completed first
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: changelog
        uses: tj-actions/changed-files@v4
        with:
          # These patterns specify which files should be considered for release notes.
          # If a file matching any of these patterns is changed, it will be included.
          files: |
            **/*.go
            *.md
            Makefile
          # Exclude specific files or directories from being considered.
          # This can be useful for ignoring auto-generated files or tests.
          files_ignore: |
            **/*.test.go
            **/vendor/**
            **/*.log
            **/testdata/**

      - name: Create Release Notes
        if: steps.changelog.outputs.any_changed == 'true'
        run: |
          echo "Generating release notes for changed files:"
          echo "${{ steps.changelog.outputs.all_changed_files }}"
          # Here you would typically generate more detailed release notes,
          # perhaps by parsing commit messages or using a dedicated changelog generator.
          # For this example, we'll just put a placeholder.
          RELEASE_NOTES="Release \`${{ github.ref_name }}\`"$'\n'$'\n'
          RELEASE_NOTES+="This release includes changes to the following files:"$'\n'
          # Convert space-separated files to array and iterate
          IFS=' ' read -ra FILES <<< "${{ steps.changelog.outputs.all_changed_files }}"
          for file in "${FILES[@]}"; do
            RELEASE_NOTES+="- \`${file}\`"$'\n'
          done
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "${RELEASE_NOTES}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.release_notes }}
          # Specify which assets to upload if you don't want to upload everything from build-release
          # files: dist/*/*.tar.gz, dist/*.exe, dist/*.zip
          draft: false # Set to true if you want to review the release before publishing
          prerelease: false
